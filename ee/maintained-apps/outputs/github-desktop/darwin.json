{
  "versions": [
    {
      "version": "3.4.18-19c76e1d",
      "queries": {
        "exists": "SELECT 1 FROM apps WHERE bundle_identifier = 'com.github.GitHubClient';"
      },
      "installer_url": "https://desktop.githubusercontent.com/releases/3.4.18-19c76e1d/GitHubDesktop-arm64.zip",
      "unique_identifier": "com.github.GitHubClient",
      "install_script_ref": "90164350",
      "uninstall_script_ref": "e8252f2a",
      "sha256": "39e46989d7a8df85ae4cb4178e951eae74b63638ebdce48e8ba821bdf5281d1d"
    }
  ],
  "refs": {
    "90164350": "#!/bin/sh\n\n# variables\nAPPDIR=\"/Applications/\"\nTMPDIR=$(dirname \"$(realpath $INSTALLER_PATH)\")\n# functions\n\nquit_application() {\n  local bundle_id=\"$1\"\n  local timeout_duration=10\n\n  # check if the application is running\n  if ! osascript -e \"application id \\\"$bundle_id\\\" is running\" 2\u003e/dev/null; then\n    return\n  fi\n\n  local console_user\n  console_user=$(stat -f \"%Su\" /dev/console)\n  if [[ $EUID -eq 0 \u0026\u0026 \"$console_user\" == \"root\" ]]; then\n    echo \"Not logged into a non-root GUI; skipping quitting application ID '$bundle_id'.\"\n    return\n  fi\n\n  echo \"Quitting application '$bundle_id'...\"\n\n  # try to quit the application within the timeout period\n  local quit_success=false\n  SECONDS=0\n  while (( SECONDS \u003c timeout_duration )); do\n    if osascript -e \"tell application id \\\"$bundle_id\\\" to quit\" \u003e/dev/null 2\u003e\u00261; then\n      if ! pgrep -f \"$bundle_id\" \u003e/dev/null 2\u003e\u00261; then\n        echo \"Application '$bundle_id' quit successfully.\"\n        quit_success=true\n        break\n      fi\n    fi\n    sleep 1\n  done\n\n  if [[ \"$quit_success\" = false ]]; then\n    echo \"Application '$bundle_id' did not quit.\"\n  fi\n}\n\n\n# extract contents\nunzip \"$INSTALLER_PATH\" -d \"$TMPDIR\"\n# copy to the applications folder\nquit_application 'com.github.GitHubClient'\nsudo [ -d \"$APPDIR/GitHub Desktop.app\" ] \u0026\u0026 sudo mv \"$APPDIR/GitHub Desktop.app\" \"$TMPDIR/GitHub Desktop.app.bkp\"\nsudo cp -R \"$TMPDIR/GitHub Desktop.app\" \"$APPDIR\"\n[ -d \".\" ] \u0026\u0026 /bin/ln -h -f -s -- \"$APPDIR/GitHub Desktop.app/Contents/Resources/app/static/github.sh\" \"github\"\n",
    "e8252f2a": "#!/bin/sh\n\n# variables\nAPPDIR=\"/Applications/\"\nLOGGED_IN_USER=$(scutil \u003c\u003c\u003c \"show State:/Users/ConsoleUser\" | awk '/Name :/ { print $3 }')\n# functions\n\ntrash() {\n  local logged_in_user=\"$1\"\n  local target_file=\"$2\"\n  local timestamp=\"$(date +%Y-%m-%d-%s)\"\n  local rand=\"$(jot -r 1 0 99999)\"\n\n  # replace ~ with /Users/$logged_in_user\n  if [[ \"$target_file\" == ~* ]]; then\n    target_file=\"/Users/$logged_in_user${target_file:1}\"\n  fi\n\n  local trash=\"/Users/$logged_in_user/.Trash\"\n  local file_name=\"$(basename \"${target_file}\")\"\n\n  if [[ -e \"$target_file\" ]]; then\n    echo \"removing $target_file.\"\n    mv -f \"$target_file\" \"$trash/${file_name}_${timestamp}_${rand}\"\n  else\n    echo \"$target_file doesn't exist.\"\n  fi\n}\n\nsudo rm -rf \"$APPDIR/GitHub Desktop.app\"\nsudo rm -rf 'github'\nsudo rmdir '~/.config/git'\ntrash $LOGGED_IN_USER '~/Library/Application Support/com.apple.sharedfilelist/com.apple.LSSharedFileList.ApplicationRecentDocuments/com.github.GitHubClient.sfl*'\ntrash $LOGGED_IN_USER '~/Library/Application Support/com.github.GitHubClient'\ntrash $LOGGED_IN_USER '~/Library/Application Support/com.github.GitHubClient.ShipIt'\ntrash $LOGGED_IN_USER '~/Library/Application Support/GitHub Desktop'\ntrash $LOGGED_IN_USER '~/Library/Application Support/ShipIt_stderr.log'\ntrash $LOGGED_IN_USER '~/Library/Application Support/ShipIt_stdout.log'\ntrash $LOGGED_IN_USER '~/Library/Caches/com.github.GitHubClient'\ntrash $LOGGED_IN_USER '~/Library/Caches/com.github.GitHubClient.ShipIt'\ntrash $LOGGED_IN_USER '~/Library/HTTPStorages/com.github.GitHubClient'\ntrash $LOGGED_IN_USER '~/Library/Logs/GitHub Desktop'\ntrash $LOGGED_IN_USER '~/Library/Preferences/ByHost/com.github.GitHubClient.ShipIt.*.plist'\ntrash $LOGGED_IN_USER '~/Library/Preferences/com.github.GitHubClient.helper.plist'\ntrash $LOGGED_IN_USER '~/Library/Preferences/com.github.GitHubClient.plist'\ntrash $LOGGED_IN_USER '~/Library/Saved Application State/com.github.GitHubClient.savedState'\n"
  }
}